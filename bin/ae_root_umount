#!/bin/bash

# ae_root_umount - AUFS unmounter for 'async emerge'
# GPL ver. 2
# version: 1.0
# 2011, Alex Dubenetsky: alexdu@forums.gentoo.org

# Features:
# 	- unmount all AUFS, transparent and bind @ ${AE_DIR[ROOT]}
#	- kickoff blockers

# get config
. /etc/async.emerge.conf

einfo "Unmounting AUFS /+/var from ${AE_DIR[ROOT]}:"

# unmounting blockers (dbus --autolaunch, for example)
if [ "${AE_VCS[UNMOUNT_KILL_BLOCKERS]}" == "y" ]; then
	# def cmd for request blocker(s) in chrooted dirs
	cmd="lsof 2>/dev/null | grep ${AE_DIR[CHROOT]} | cut -c11-16 | uniq"
	s=`eval $cmd`
	#echo $s
	# check if there is blocker...
	if [ "$s" != "" ] ; then
		einfo "  Killing fs-blocking processes that were left after chrooted activity:"
		i=1
		# loop to try to kill
		while (($i < ${AE_VCS[UNMOUNT_KILL_BLOCKERS_MT]}+2)) && [ "$s" != "" ] ; do
			to_kill_pid=""
			to_kill_name=""
			signal="-INT"
			# loop to get info about each blocker
			for t in $s; do
				to_kill_pid="$to_kill_pid $t"
				to_kill_name="$to_kill_name "`ps -p $t -o comm=`
			done
			# send -TERM in last third, -KILL in last two tries
			if (($i >= 2*${AE_VCS[UNMOUNT_KILL_BLOCKERS_MT]}/3)); then
				if (($i >= ${AE_VCS[UNMOUNT_KILL_BLOCKERS_MT]})); then signal="-KILL"; else signal="-TERM"; fi
			fi

			einfo "    try $i of $((${AE_VCS[UNMOUNT_KILL_BLOCKERS_MT]}+2)) to signaling $signal to:"$to_kill_name
			# send signal
			kill $signal $to_kill_pid &
			# waiting for shutdown
			sleep ${AE_VCS[UNMOUNT_KILL_BLOCKERS_TO]}
			# vars care
			let 'i+=1'
			s=`eval $cmd`
		done
		# check if there is no more blockers in lsof
		if [[ "$s" != "" ]]; then
			eerror "  Can't kill some blockers: unmounting chrooted dirs is impossible. Stop."
			eend 1
		else
			einfo "  All blockers were killed."
		fi
	fi
fi

# umount all for path $1 and type $2
umnt_path_type(){
	local count
	for i in `mount | grep "$1" | sort -r | egrep "$2" | cut -f3 -d' ' | sort -r`; do
		#echo "umount -lv $i"
		umount -lv "$i" 2>/dev/null >&2; ((count++))
	done
	return $count
}


# unmount special
umnt_path_type "${AE_DIR[CHROOT]}" '(proc|sysfs|tmpfs)'
lost=$?

# unmount transparent
umnt_path_type "${AE_DIR[CHROOT]}" 'rw,bind'
nonmerged=$?

# unmount AUFS below ${AE_DIR[ROOT]}
umnt_path_type "${AE_DIR[ROOT]}" 'aufs'
unmounted=$?

# unmount bind below ${AE_DIR[ROOT]}
umnt_path_type "${AE_DIR[ROOT]}" 'bind'
unbinded=$?

if [ "`mount | grep ${AE_DIR[ROOT]}`" == "" ]; then
	if (($unmounted+$nonmerged)); then
		einfo "  Unmounted and unbinded $unmounted dirs, +$nonmerged as transparent (non-merged) and $lost specials."
	else
		ewarn "  Not found any AUFS for unmounting."
	fi
else
	if (($unmounted+$nonmerged)); then
		eerror "  Unmounted and unbinded $unmounted dirs, +$nonmerged as transparent (non-merged) and $lost specials."
	fi
	eerror "  Can't unmount all AUFS mountpoints!"
	eend 2
	exit 1
fi

eend 0
exit 0

