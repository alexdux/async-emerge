#!/bin/bash

# ae_functions - common functions for 'async emerge' toolset
# GPL ver. 2
# version: 1.0
# 2011, Alex Dubenetsky: alexdu@forums.gentoo.org

# Features: see below

# lock or exit: lock_file exit_code exit_msg ->
do_lock() { 
	# check locking with $1
#-	[[ -e "$1" && "`(ps -p \`cat \"$1\" \` -o comm= ) 2>/dev/null`" == "$PNAME" ]] && {
	[ "$((ps -p $(<"$1") -o comm= ) 2>/dev/null)" == "$PNAME" ] && {
		[ "$3" ] && eerror "$3"
		exit $2
	}
	# make lock
	echo $$ > "$1"
	# do trap
	trap "ewarn 'Terminated!'; eend 1; rm -f \"$1\"; exit $?" INT TERM
	trap "rm -f \"$1\"; exit $?" EXIT
}

# check if VCS running, to-do: add MultiVCS support

# date time
dt_mark() { echo "*** $(date) ***"; }

# 
begin_log() { :; }

# 
end_log() { :; }

# get state: -> $st
collect_signes() { # to-do: correct build lock
	for i in "${AE_PID[AE_COOK]}" "${AE_SIGN[SYNCED]}" "${AE_SIGN[COOKED]}" "${AE_SIGN[REVDEPED]}"; do 
		[ -e $i ] && st+='Y' || st+='N'
	done
}

# check if emerge {update|rebuild} world is going to fall
# check_if_emerge_possible: $type_of_check $log_last $warn_log_last $log $warn_log
check_if_emerge_possible() {

	dt_mark &> "$2"
	dt_mark &> "$3"
	
	case "$1" in
		update)
				eval "${AE_CMD[CHECK_UPDATE]} &>> $2";;
		rebuild)
				eval "${AE_CMD[CHECK_REBUILD]} &>> $2";;
		n|none)
				return true;;
		*)
			echo "invalid constant '$1' for check_if_emerge_possible()"
	esac
	cmdRet=$?
	echo "Retcode: $cmdRet" &>> "$2"

	(($cmdRet)) && tail -n +$(grep -n "Size of downloads" "$2" | cut -f1 -d ':') "$2" &>> "$3"
	
	cat "$2" &>> "$4"
	cat "$3" &>> "$5"
	
	return $cmdRet
}

# recho_start: -
recho_start() { recho_len=0; }
recho_start

# reset msg
# recho: $msg
recho() {
	local i
	for ((i=0; i < $recho_len; i++)); do echo -en "\b"; done
	echo -en "$1"
	for ((i=${#1}; i < $recho_len; i++)); do echo -en " "; done
	for ((i=${#1}; i < $recho_len; i++)); do echo -en "\b"; done
	recho_len=${#1}
}

# add msg
# raecho: $msg
raecho() {
	echo -en "$1"
	((recho_len+=${#1}))
}

# rotating dash
RDASHC='\|/-'
rdash() {
	[ $rdash_cnt ] && echo -en "\b" || rdash_cnt=0
	echo -en "${RDASHC:$rdash_cnt:1}"
	(( ++rdash_cnt % 4)) || rdash_cnt=0
}

# end rotating dash
rdash_end() { echo -en "\b \b"; }

